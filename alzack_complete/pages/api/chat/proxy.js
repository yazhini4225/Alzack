import fetch from 'node-fetch'; import prisma from '../../../lib/prisma'; import { verifyToken } from '../../../lib/auth'
async function getUser(req){ const cookie = req.headers.cookie||''; const m = cookie.split(';').map(c=>c.trim()).find(c=>c.startsWith('alzack_token=')); if(!m) return null; const token = m.split('=')[1]; return verifyToken(token) }
export default async function handler(req,res){ if(req.method!=='POST') return res.status(405).end(); const payload = await getUser(req); const { prompt } = req.body; if(!prompt) return res.status(400).json({ error:'missing prompt' }); const OPENAI_API_KEY = process.env.OPENAI_API_KEY; if(!OPENAI_API_KEY) return res.status(500).json({ error:'missing OPENAI_API_KEY' }); const r = await fetch('https://api.openai.com/v1/chat/completions',{ method:'POST', headers:{ 'Authorization': 'Bearer '+OPENAI_API_KEY, 'Content-Type':'application/json' }, body: JSON.stringify({ model:'gpt-4o-mini', messages:[{role:'user', content: prompt}], max_tokens:500 }) }); const j = await r.json(); const assistant = j.choices && j.choices[0] && j.choices[0].message ? j.choices[0].message.content : JSON.stringify(j); try{ if(payload && payload.userId){ const user = await prisma.user.findUnique({ where:{ id: payload.userId } }); if(user && user.patientId){ await prisma.moodLog.create({ data:{ patientId: user.patientId, source:'chat', moodValue:0, notes: prompt.slice(0,300) } }) } } }catch(e){ console.error('mood log failed', e) } res.json({ reply: assistant }) }
